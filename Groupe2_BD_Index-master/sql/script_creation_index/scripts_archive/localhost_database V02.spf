<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<data>
	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
	JjCaEXZW3nHd762TYghVNxX/mQ==
	</data>
	<key>encrypted</key>
	<true/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,VDATE_PUBLICATION,VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END;
CALL PARTICLE("2017-12-31",1,1,1,@VID_ARTICLE);
-- CALL PARTICLE("01-01-2018",1,1,2,VID_ARTICLE);
SELECT @VID_ARTICLE</string>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,STR_TO_DATE(VDATE_PUBLICATION,'%d-%m-%Y'),VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END;
CALL PARTICLE("31-12-2017",1,1,1,@VID_ARTICLE);
CALL PARTICLE("01-01-2018",1,1,2,VID_ARTICLE)</string>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,SELECT STR_TO_DATE(VDATE_PUBLICATION,'%d-%m-%Y');,VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END</string>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,VDATE_PUBLICATION,VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END;
CALL PARTICLE('31-12-2017',1,1,1,@VID_ARTICLE)</string>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,VDATE_PUBLICATION,VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END;
CALL PARTICLE("31-12-2017",1,1,1,@VID_ARTICLE);
CALL PARTICLE("01-01-2018",1,1,2,VID_ARTICLE);
SELECT @VID_ARTICLE</string>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,VDATE_PUBLICATION,VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END;
CALL PARTICLE("31-12-2017",1,1,1,@VID_ARTICLE)</string>
		<string>DROP PROCEDURE IF EXISTS PARTICLE;
CREATE PROCEDURE PARTICLE (IN VDATE_PUBLICATION DATE, IN VID_JOURNAL INT, IN VID_CLASSE INT, VID_POSITIVE INT, OUT VID_ARTICLE INT)   

BEGIN

     INSERT INTO ARTICLE VALUES (NULL,VDATE_PUBLICATION,VID_JOURNAL,VID_CLASSE,VID_POSITIVE);
     SELECT LAST_INSERT_ID() INTO VID_ARTICLE;

END;
CALL PARTICLE("31/12/2017",1,1,1,@VID_ARTICLE)</string>
		<string>DROP PROCEDURE IF EXISTS PPOSITIVITE;
CREATE PROCEDURE PPOSITIVITE (IN VPOSITIVITE BOOLEAN)
BEGIN
     INSERT INTO POSITIVITE VALUES (NULL,VPOSITIVITE);
END;
CALL PPOSITIVITE(TRUE);
CALL PPOSITIVITE(FALSE)</string>
		<string>DROP PROCEDURE IF EXISTS PJOURNAL;
CREATE PROCEDURE PJOURNAL (IN VJOURNAL VARCHAR(50))
BEGIN
     INSERT INTO JOURNAL VALUES (NULL,VJOURNAL);
END;
CALL PJOURNAL("LIBERATION");
CALL PJOURNAL("FIGARO")</string>
		<string>DROP PROCEDURE IF EXISTS PCLASSIFICATION;
CREATE PROCEDURE PCLASSIFICATION (IN VCLASSE VARCHAR(50))
BEGIN
     INSERT INTO CLASSIFICATION VALUES (NULL,VCLASSE);
END;
CALL PCLASSIFICATION("SPORT");
CALL PCLASSIFICATION("HUMOUR")</string>
		<string>DROP PROCEDURE IF EXISTS PPOS_TAG;
CREATE PROCEDURE PPOS_TAGGING (IN VPOS_TAG VARCHAR(50))
BEGIN
     INSERT INTO POS_TAGGING VALUES (NULL,VPOS_TAG);
END;
CALL PPOS_TAGGING("ADVERBE");
CALL PPOS_TAGGING("SUJET")</string>
		<string>DROP PROCEDURE IF EXISTS PENTITE;
CREATE PROCEDURE PENTITE (IN VENTITE VARCHAR(50))   
BEGIN
     INSERT INTO ENTITE VALUES (NULL,VENTITE);
END;
CALL PENTITE("PERSONNE");
CALL PENTITE("LIEU")</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE);
SELECT @ID_RACINE</string>
		<string>#------------------------------------------------------------
#        Script MySQL.
#------------------------------------------------------------


#------------------------------------------------------------
# Table: article
#------------------------------------------------------------

CREATE TABLE article(
        id_article               int (11) Auto_increment  NOT NULL ,
        date_publication         Date ,
        id_journal_journal       Int NOT NULL ,
        id_classe_classification Int NOT NULL ,
        id_positivite_positivite Int NOT NULL ,
        PRIMARY KEY (id_article )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: journal
#------------------------------------------------------------

CREATE TABLE journal(
        id_journal  int (11) Auto_increment  NOT NULL ,
        nom_journal Varchar (50) ,
        PRIMARY KEY (id_journal ) ,
        UNIQUE (nom_journal )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: auteur
#------------------------------------------------------------

CREATE TABLE auteur(
        id_auteur     int (11) Auto_increment  NOT NULL ,
        nom_auteur    Varchar (50) ,
        prenom_auteur Varchar (50) ,
        PRIMARY KEY (id_auteur )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: classification
#------------------------------------------------------------

CREATE TABLE classification(
        id_classe int (11) Auto_increment  NOT NULL ,
        classe    Varchar (25) ,
        PRIMARY KEY (id_classe ) ,
        UNIQUE (classe )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: positivite
#------------------------------------------------------------

CREATE TABLE positivite(
        id_positivite int (11) Auto_increment  NOT NULL ,
        positivite    Bool ,
        PRIMARY KEY (id_positivite ) ,
        UNIQUE (positivite )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: mot_racine
#------------------------------------------------------------

CREATE TABLE mot_racine(
        id_racine  int (11) Auto_increment  NOT NULL ,
        mot        Varchar (25) ,
        id_mot_mot Int NOT NULL ,
        PRIMARY KEY (id_racine ) ,
        UNIQUE (mot )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: entite
#------------------------------------------------------------

CREATE TABLE entite(
        id_entite   int (11) Auto_increment  NOT NULL ,
        type_entite Varchar (25) ,
        PRIMARY KEY (id_entite ) ,
        UNIQUE (type_entite )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: mot
#------------------------------------------------------------

CREATE TABLE mot(
        id_mot int (11) Auto_increment  NOT NULL ,
        mot    Varchar (50) NOT NULL ,
        PRIMARY KEY (id_mot ) ,
        UNIQUE (mot )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: pos_tagging
#------------------------------------------------------------

CREATE TABLE pos_tagging(
        id_pos_tag int (11) Auto_increment  NOT NULL ,
        pos_tag    Varchar (25) ,
        PRIMARY KEY (id_pos_tag ) ,
        UNIQUE (pos_tag )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: ecrit
#------------------------------------------------------------

CREATE TABLE ecrit(
        id_article_article Int NOT NULL ,
        id_auteur_auteur   Int NOT NULL ,
        PRIMARY KEY (id_article_article ,id_auteur_auteur )
)ENGINE=InnoDB;
#------------------------------------------------------------
# Table: apparaitre
#------------------------------------------------------------

CREATE TABLE apparaitre(
        position               Int ,
        id_racine_mot_racine   Int NOT NULL ,
        id_article_article     Int NOT NULL ,
        id_entite_entite       Int NOT NULL ,
        id_pos_tag_pos_tagging Int NOT NULL ,
        PRIMARY KEY (id_racine_mot_racine ,id_article_article ,id_entite_entite ,id_pos_tag_pos_tagging )
)ENGINE=InnoDB;
ALTER TABLE article ADD CONSTRAINT FK_article_id_journal_journal FOREIGN KEY (id_journal_journal) REFERENCES journal(id_journal);
ALTER TABLE article ADD CONSTRAINT FK_article_id_classe_classification FOREIGN KEY (id_classe_classification) REFERENCES classification(id_classe);
ALTER TABLE article ADD CONSTRAINT FK_article_id_positivite_positivite FOREIGN KEY (id_positivite_positivite) REFERENCES positivite(id_positivite);
ALTER TABLE mot_racine ADD CONSTRAINT FK_mot_racine_id_mot_mot FOREIGN KEY (id_mot_mot) REFERENCES mot(id_mot);
ALTER TABLE ecrit ADD CONSTRAINT FK_ecrit_id_article_article FOREIGN KEY (id_article_article) REFERENCES article(id_article);
ALTER TABLE ecrit ADD CONSTRAINT FK_ecrit_id_auteur_auteur FOREIGN KEY (id_auteur_auteur) REFERENCES auteur(id_auteur);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_racine_mot_racine FOREIGN KEY (id_racine_mot_racine) REFERENCES mot_racine(id_racine);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_article_article FOREIGN KEY (id_article_article) REFERENCES article(id_article);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_entite_entite FOREIGN KEY (id_entite_entite) REFERENCES entite(id_entite);
ALTER TABLE apparaitre ADD CONSTRAINT FK_apparaitre_id_pos_tag_pos_tagging FOREIGN KEY (id_pos_tag_pos_tagging) REFERENCES pos_tagging(id_pos_tag)</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE)</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE2);
SELECT @ID_RACINE</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE2);
SELECT @ID_RACINE;</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT("VBA", "PYTHON", @ID_RACINE);
CALL PMOT("PHP", "JAVA", @ID_RACINE);
SELECT @ID_RACINE;</string>
		<string>DROP PROCEDURE IF EXISTS PMOT;
CREATE PROCEDURE PMOT (IN VMOT VARCHAR(50), IN VRACINE VARCHAR(50), OUT VID_RACINE INT)   


BEGIN
DECLARE VID_MOT INT DEFAULT 0;

     INSERT INTO MOT VALUES (NULL,VMOT);
     
     SELECT ID_MOT INTO VID_MOT
     FROM MOT
     WHERE MOT=VMOT;

     INSERT INTO MOT_RACINE VALUES (NULL,VRACINE,VID_MOT);  

     SELECT ID_RACINE INTO VID_RACINE
     FROM MOT_RACINE
     WHERE MOT=VRACINE;

END;
CALL PMOT('VBA', 'PYTHON', @ID_RACINE);
CALL PMOT('PHP', 'JAVA,', @ID_RACINE);
SELECT @ID_RACINE;</string>
		<string>-- CALL PMOT('LIL', 'LOL,', @ID_RACINE);
SELECT @ID_RACINE</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>5.7.20</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
